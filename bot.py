
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
import re

API_TOKEN = "7790662231:AAFzWl1jAqajyx29OW4JVa7-mkSlCrTjiEQ"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

conn = sqlite3.connect("kvanto.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, name TEXT, reminder_time TEXT)")
cursor.execute("CREATE TABLE IF NOT EXISTS answers (user_id INTEGER, date TEXT, q1 TEXT, q2 TEXT, q3 TEXT, q4 TEXT, q5 TEXT)")
conn.commit()

class Form(StatesGroup):
    name = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT name FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {row[0]}! –ù–∞–ø–∏—à–∏ /practice —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await Form.name.set()

@dp.message_handler(state=Form.name)
async def get_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text
    cursor.execute("INSERT OR REPLACE INTO users (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    await message.answer(f"–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {name}! –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?")
    await message.answer("–í–æ–ø—Ä–æ—Å 1: –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–±–ª–∏–∑–∏–ª–æ —Ç–µ–±—è –∫ –¥–µ–Ω—å–≥–∞–º?")
    await Form.q1.set()

@dp.message_handler(state=Form.q1)
async def q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –ì–¥–µ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥?")
    await Form.q2.set()

@dp.message_handler(state=Form.q2)
async def q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 3: –ß—Ç–æ —É–≤–æ–¥–∏–ª–æ —Ç–µ–±—è –≤ —Å—Ç–æ—Ä–æ–Ω—É?")
    await Form.q3.set()

@dp.message_handler(state=Form.q3)
async def q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 4: –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≤—Ç—Ä–∞ –±—ã—Ç—å –±–ª–∏–∂–µ –∫ –¥–µ–Ω—å–≥–∞–º?")
    await Form.q4.set()

@dp.message_handler(state=Form.q4)
async def q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    await message.answer("–ò –Ω–∞–∫–æ–Ω–µ—Ü ‚Äî —Ç–≤–æ—è –º–∏–∫—Ä–æ–∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞?")
    await Form.q5.set()

@dp.message_handler(state=Form.q5)
async def q5(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    q1, q2, q3, q4, q5 = data['q1'], data['q2'], data['q3'], data['q4'], message.text
    today = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("INSERT INTO answers VALUES (?, ?, ?, ?, ?, ?, ?)", (user_id, today, q1, q2, q3, q4, q5))
    conn.commit()
    await message.answer(
        f"üéØ –í–æ—Ç —Ç–≤–æ–π –¥–µ–Ω—å:
"
        f"1. {q1}
2. {q2}
3. {q3}
4. {q4}
5. {q5}

"
        f"ü•á –£—Å–ø–µ—à–Ω—ã–π —É—Å–ø–µ—Ö: {q1}
ü•¥ –ñ–º—ã—Ö: {q3}

"
        f"üí° –°–æ–≤–µ—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –ø—Ä–æ–¥–æ–ª–∂–∞–π –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –¥–µ–Ω—å–≥–∞–º."
    )
    await state.finish()

@dp.message_handler(commands=['settime'])
async def set_time(message: types.Message):
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")

@dp.message_handler(lambda msg: re.match(r'^\d{1,2}:\d{2}$', msg.text))
async def save_time(message: types.Message):
    try:
        datetime.strptime(message.text, "%H:%M")
        cursor.execute("UPDATE users SET reminder_time=? WHERE user_id=?", (message.text, message.from_user.id))
        conn.commit()
        await message.answer(f"–û–∫! –ë—É–¥—É –ø–∏—Å–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {message.text}")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: –ß–ß:–ú–ú")

@dp.message_handler(commands=['—Å–æ–≤–µ—Ç'])
async def advise(message: types.Message):
    await message.answer("üí° –°–æ–≤–µ—Ç: –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –¥–≤–∏–≥–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏ ‚Äî –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ –ø–µ—Ä–≤—ã–º.")

@dp.message_handler(commands=['practice'])
async def practice(message: types.Message):
    await start(message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
